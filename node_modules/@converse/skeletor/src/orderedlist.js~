import Overview from './overview.js';
import debounce from 'lodash-es/debounce.js';


const OrderedListView = Overview.extend({
   /* An OrderedListView is a special type of Overview which adds some
    * methods and conventions for rendering an ordered list of elements.
    */
   // The `listItems` attribute denotes the path (from this View) to the
   // list of items.
   listItems: 'model',
   // The `sortEvent` attribute specifies the event which should cause the
   // ordered list to be sorted.
   sortEvent: 'change',
   // If false, we debounce sorting and inserting the new item
   // (for improved performance when a large amount of items get added all at once)
   // Otherwise we immediately sort the items and insert the new item.
   sortImmediatelyOnAdd: false,
   // The `listSelector` is the selector used to query for the DOM list
   // element which contains the ordered items.
   listSelector: '.ordered-items',
   // The `itemView` is constructor which should be called to create a
   // View for a new item.
   ItemView: undefined,
   // The `subviewIndex` is the attribute of the list element model which
   // acts as the index of the subview in the overview.
   // An overview is a "Collection" of views, and they can be retrieved
   // via an index. By default this is the 'id' attribute, but it could be
   // set to something else.
   subviewIndex: 'id',

   initialize () {
      this.sortEventually = debounce(() => this.sortAndPositionAllItems(), 100);
      this.items = get(this, this.listItems);
      this.items.on('remove', this.removeView, this);
      this.items.on('reset', this.removeAll, this);

      this.items.on('add', (a, b) => {
         if (this.sortImmediatelyOnAdd) {
            this.sortAndPositionAllItems();
         } else {
            this.sortEventually();
         }
      });

      if (this.sortEvent) {
         this.items.on(this.sortEvent, this.sortEventually, this);
      }
   },

   createItemView (item) {
      let item_view = this.get(item.get(this.subviewIndex));
      if (!item_view) {
            item_view = new this.ItemView({model: item});
            this.add(item.get(this.subviewIndex), item_view);
      } else {
            item_view.model = item;
            item_view.initialize();
      }
      item_view.render();
      return item_view;
   },

   removeView (item) {
      this.remove(item.get(this.subviewIndex));
   },

   sortAndPositionAllItems () {
      if (!this.items.length) {
            return;
      }
      this.items.sort();

      const list_el = this.el.querySelector(this.listSelector);
      const div = document.createElement('div');
      list_el.parentNode.replaceChild(div, list_el);
      this.items.forEach(item => {
            let view = this.get(item.get(this.subviewIndex));
            if (!view) {
               view = this.createItemView(item)
            }
            list_el.insertAdjacentElement('beforeend', view.el);
      });
      div.parentNode.replaceChild(list_el, div);
   }
});

export default OrderedListView;
