(function (root, factory) {
    define([
        "converse-core",
        "tpl!spoiler_button",
        "tpl!spoiler_message",
        "converse-chatview"
    ], factory);
}(this, function (converse, tpl_spoiler_button, tpl_spoiler_message) {
    "use strict";

    const { $msg, Backbone, Promise, Strophe, _, b64_sha1, f, sizzle, moment } = converse.env;
    Strophe.addNamespace('SPOILER', 'urn:xmpp:spoiler:0');


    converse.plugins.add("converse-spoilers", {

        dependencies: ["converse-chatview"],

        overrides: {
            // Overrides mentioned here will be picked up by converse.js's
            // plugin architecture they will replace existing methods on the
            // relevant objects or classes.
            //
            // New functions which don't exist yet can also be added.

            ChatBoxView: {

                events: {
                    'click .toggle-spoiler': 'toggleSpoilerMessage',
                    'click .toggle-compose-spoiler': 'toggleComposeSpoilerMessage',
                },

                renderSpoilerMessage (msg, attrs) {
                    /* Render a "spoiler" message, as defined in XEP-0382
                     *
                     * Parameters:
                     *  (HTMLElement) msg: The chat message DOM element
                     *  (Object) attrs: An object containing the message attributes.
                     */
                    const hint = msg.querySelector('.spoiler-hint');
                    hint.appendChild(document.createTextNode(attrs.spoiler_hint || ''));
                },

                renderToolbar (toolbar, options) {
                    const result = this.__super__.renderToolbar.apply(this, arguments);
                    this.addSpoilerButton(options);
                    return result;
                },

                getToolbarOptions (options) {
                    const { _converse } = this,
                        { __ } = _converse;

                    options = this.__super__.getToolbarOptions.apply(this, arguments);
                    let label_toggle_spoiler;
                    if (this.model.get('composing_spoiler')) {
                        label_toggle_spoiler = __('Click to write as a normal (non-spoiler) message');
                    } else {
                        label_toggle_spoiler = __('Click to write your message as a spoiler');
                    }
                    return _.extend(options, {
                        'label_toggle_spoiler': label_toggle_spoiler,
                        'show_spoiler_button': _converse.visible_toolbar_buttons.spoiler,
                    });
                },

                getExtraMessageTemplateAttributes (attrs) {
                    /* Provides a hook for sending more attributes to the
                     * message template.
                     *
                     * Parameters:
                     *  (Object) attrs: An object containing message attributes.
                     */
                    const { _converse } = this,
                        { __ } = _converse;

                    attrs = this.__super__.getExtraMessageTemplateAttributes.apply(this, arguments);
                    if (attrs.is_spoiler) {
                        return _.extend(attrs, {'label_show': __('Show hidden message')});
                    } else {
                        return attrs
                    }
                },

                toggleComposeSpoilerMessage () {
                    this.model.set('composing_spoiler', !this.model.get('composing_spoiler'));
                    this.renderMessageForm();
                    this.focus();
                },

                addSpoilerButton (options) {
                    /* Asynchronously adds a button for writing spoiler
                     * messages, based on whether the contact's client supports
                     * it.
                     */
                    const { _converse } = this.__super__;
                    if (!options.show_spoiler_button || this.model.get('type') === 'chatroom') {
                        return;
                    }
                    const contact_jid = this.model.get('jid');
                    const resources = this.model.get('resources');
                    if (_.isEmpty(resources)) {
                        return;
                    }
                    Promise.all(_.map(_.keys(resources), (resource) =>
                        _converse.api.disco.supports(Strophe.NS.SPOILER, `${contact_jid}/${resource}`)
                    )).then((results) => {
                        const supported = _.every(f.map(f.get('supported'))(results));
                        if (supported) {
                            const html = tpl_spoiler_button(this.model.toJSON());
                            if (_converse.visible_toolbar_buttons.emoji) {
                                this.el.querySelector('.toggle-smiley').insertAdjacentHTML('afterEnd', html);
                            } else {
                                this.el.querySelector('.chat-toolbar').insertAdjacentHTML('afterBegin', html);
                            }
                        }
                    });
                },

                createMessageStanza (message) {
                    const stanza = this.__super__.createMessageStanza.apply(this, arguments);
                    if (message.get('is_spoiler')) {
                        stanza.root();
                        if (message.get('spoiler_hint')) {
                            stanza.c('spoiler', {'xmlns': Strophe.NS.SPOILER }, message.get('spoiler_hint'));
                        } else {
                            stanza.c('spoiler', {'xmlns': Strophe.NS.SPOILER });
                        }
                    }
                    return stanza;
                }
            }
        },

        initialize () {
            /* The initialize function gets called as soon as the plugin is
             * loaded by converse.js's plugin machinery.
             */
            const { _converse } = this;

            const visible_toolbar_buttons = _converse.api.settings.visible_toolbar_buttons;
            _converse.api.settings.update({
                'visible_toolbar_buttons': _.extend(
                    visible_toolbar_buttons,
                    {'spoiler': true}
                )
            });

            _converse.on('connected', () => {
                // Advertise that we support XEP-0382 Message Spoilers
                _converse.connection.disco.addFeature(Strophe.NS.SPOILER);
            });
        }
    });
}));
