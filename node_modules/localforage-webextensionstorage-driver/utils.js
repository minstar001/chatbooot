'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.getStorage = getStorage;
exports.usePromise = usePromise;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Need to invoke a function at runtime instead of import-time to make tests
 * pass with mocked browser and chrome objects
 */
function getStorage() {
  return window.browser && browser.storage || window.chrome && chrome.storage;
}

/**
 * Need to invoke a function at runtime instead of import-time to make tests
 * pass with mocked browser and chrome objects
 */
function usesPromises() {
  var storage = getStorage();
  try {
    return storage && storage.local.get && storage.local.get() && typeof storage.local.get().then === 'function';
  } catch (e) {
    return false;
  }
}

/**
 * Converts a callback-based API to a promise based API.
 * For now we assume that there is only one arg in addition to the callback
 */
function usePromise(fn, arg) {
  if (usesPromises()) {
    return fn(arg);
  }

  return new _promise2.default(function (resolve) {
    fn(arg, function () {
      resolve.apply(undefined, arguments);
    });
  });
}