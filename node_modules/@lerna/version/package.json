{
  "_args": [
    [
      {
        "raw": "@lerna/version@4.0.0",
        "scope": "@lerna",
        "escapedName": "@lerna%2fversion",
        "name": "@lerna/version",
        "rawSpec": "4.0.0",
        "spec": "4.0.0",
        "type": "version"
      },
      "/usr/local/apache/htdocs/node_modules/lerna"
    ]
  ],
  "_from": "@lerna/version@4.0.0",
  "_hasShrinkwrap": false,
  "_id": "@lerna/version@4.0.0",
  "_inCache": true,
  "_location": "/@lerna/version",
  "_nodeVersion": "14.15.5",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/version_4.0.0_1612996942051_0.26459686425716145"
  },
  "_npmUser": {
    "name": "evocateur",
    "email": "daniel.stockman@gmail.com"
  },
  "_npmVersion": "lerna/4.0.0/node@v14.15.5+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@lerna/version@4.0.0",
    "scope": "@lerna",
    "escapedName": "@lerna%2fversion",
    "name": "@lerna/version",
    "rawSpec": "4.0.0",
    "spec": "4.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@lerna/publish",
    "/lerna"
  ],
  "_resolved": "https://registry.npmjs.org/@lerna/version/-/version-4.0.0.tgz",
  "_shasum": "532659ec6154d8a8789c5ab53878663e244e3228",
  "_shrinkwrap": null,
  "_spec": "@lerna/version@4.0.0",
  "_where": "/usr/local/apache/htdocs/node_modules/lerna",
  "author": {
    "name": "Daniel Stockman",
    "url": "https://github.com/evocateur"
  },
  "bugs": {
    "url": "https://github.com/lerna/lerna/issues"
  },
  "dependencies": {
    "@lerna/check-working-tree": "4.0.0",
    "@lerna/child-process": "4.0.0",
    "@lerna/collect-updates": "4.0.0",
    "@lerna/command": "4.0.0",
    "@lerna/conventional-commits": "4.0.0",
    "@lerna/github-client": "4.0.0",
    "@lerna/gitlab-client": "4.0.0",
    "@lerna/output": "4.0.0",
    "@lerna/prerelease-id-from-version": "4.0.0",
    "@lerna/prompt": "4.0.0",
    "@lerna/run-lifecycle": "4.0.0",
    "@lerna/run-topologically": "4.0.0",
    "@lerna/validation-error": "4.0.0",
    "chalk": "^4.1.0",
    "dedent": "^0.7.0",
    "load-json-file": "^6.2.0",
    "minimatch": "^3.0.4",
    "npmlog": "^4.1.2",
    "p-map": "^4.0.0",
    "p-pipe": "^3.1.0",
    "p-reduce": "^2.1.0",
    "p-waterfall": "^2.1.1",
    "semver": "^7.3.4",
    "slash": "^3.0.0",
    "temp-write": "^4.0.0",
    "write-json-file": "^4.3.0"
  },
  "description": "Bump version of packages changed since the last release",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-otUgiqs5W9zGWJZSCCMRV/2Zm2A9q9JwSDS7s/tlKq4mWCYriWo7+wsHEA/nPTMDyYyBO5oyZDj+3X50KDUzeA==",
    "shasum": "532659ec6154d8a8789c5ab53878663e244e3228",
    "tarball": "https://registry.npmjs.org/@lerna/version/-/version-4.0.0.tgz",
    "fileCount": 18,
    "unpackedSize": 89351,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJGFOCRA9TVsSAnZWagAACZUP/3WuiVYMSQpNgW8Tx4FE\ngQVJrUXyilDMjg7cvM3wYKFVXy4Zs+YuJ1I1xieK56eyVhjYfKLywXQFDuI1\nwuzIWit2x+4B90Mah5sJnHWC9Oc89ZvUJoUPC063vJPQ+aOKTDD0hN1BRHLZ\nFO2oaHBmCrTxBGW1hXc0OJXxhsjlzwVGOUQ61h1ClVUsJTjC75n/CD4gNzc/\neWOMXUGnolpg8NdHViFZQnIMMM5H6+dSYmAf0Re91gogP8J8aXaZGNJyWANe\nY8XG39Yab0orcIugUNiotRalbvU5WbdJixUx6NapsN3uuKO0w9M9lQZvRBEm\nwunvYcP7US/8YeGhdNvGpLOI4xRHAR//jnw1KQr2/R6zkOIar+9CUqaWBL+z\n9fG5pGjLj3VhVqWn5hl69zqZSDgQpB0NtVwSCwGW+wqJ5NfdRCpJIWwjHL88\naGajyYvjjIK9IC54dcysWqt4stGkmMGxonTT7QI4MUbPBJ7+95myWBQ3K0et\no7McH5PKB8KCwfRAmTBf5RMbDvHGQ2M6g96Wv+FQu7IjbUce1wPal/VaJn/n\nAr7sWWHPYcHi45hTp1NFSdTnn0S8vntY3iS2B4LkBWIEcW8URoaNkmdnd/CU\nrcOuxjuTKgHtj1V3CNwOloaAc7vJjqRtVhmSPMLAEE23R89a4qMKXC/7OF6v\n2myC\r\n=Cmf+\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.18.0"
  },
  "gitHead": "4582c476e07dddddd6b2e3ab6e7f52c1f9eed59a",
  "homepage": "https://github.com/lerna/lerna/tree/master/commands/version#readme",
  "keywords": [
    "lerna",
    "command"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "evocateur",
      "email": "daniel.stockman@gmail.com"
    }
  ],
  "name": "@lerna/version",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# `@lerna/version`\n\n> Bump version of packages changed since the last release\n\n## Usage\n\n```sh\nlerna version 1.0.1 # explicit\nlerna version patch # semver keyword\nlerna version       # select from prompt(s)\n```\n\nWhen run, this command does the following:\n\n1. Identifies packages that have been updated since the previous tagged release.\n2. Prompts for a new version.\n3. Modifies package metadata to reflect new release, running appropriate [lifecycle scripts](#lifecycle-scripts) in root and per-package.\n4. Commits those changes and tags the commit.\n5. Pushes to the git remote.\n\n## Positionals\n\n### semver `bump`\n\n```sh\nlerna version [major | minor | patch | premajor | preminor | prepatch | prerelease]\n# uses the next semantic version(s) value and this skips `Select a new version for...` prompt\n```\n\nWhen this positional parameter is passed, `lerna version` will skip the version selection prompt and [increment](https://github.com/npm/node-semver#functions) the version by that keyword.\nYou must still use the `--yes` flag to avoid all prompts.\n\n## Prerelease\n\nIf you have any packages with a prerelease version number (e.g. `2.0.0-beta.3`) and you run `lerna version` with and a non-prerelease bump (`major`, `minor`, or `patch`), it will publish those previously pre-released packages _as well as_ the packages that have changed since the last release.\n\nFor projects using conventional commits, use the following flags for prerelease management:\n\n- **[`--conventional-prerelease`](#--conventional-prerelease):** release current changes as prerelease versions.\n- **[`--conventional-graduate`](#--conventional-graduate):** graduate prerelease versioned packages to stable versions.\n\nRunning `lerna version --conventional-commits` without the above flags will release current changes as prerelease only if the version is already in prerelease.\n\n## Options\n\n- [`@lerna/version`](#lernaversion)\n  - [Usage](#usage)\n  - [Positionals](#positionals)\n    - [semver `bump`](#semver-bump)\n  - [Prerelease](#prerelease)\n  - [Options](#options)\n    - [`--allow-branch <glob>`](#--allow-branch-glob)\n    - [`--amend`](#--amend)\n    - [`--changelog-preset`](#--changelog-preset)\n    - [`--conventional-commits`](#--conventional-commits)\n    - [`--conventional-graduate`](#--conventional-graduate)\n    - [`--conventional-prerelease`](#--conventional-prerelease)\n    - [`--create-release <type>`](#--create-release-type)\n    - [`--exact`](#--exact)\n    - [`--force-publish`](#--force-publish)\n    - [`--git-remote <name>`](#--git-remote-name)\n    - [`--ignore-changes`](#--ignore-changes)\n    - [`--ignore-scripts`](#--ignore-scripts)\n    - [`--include-merged-tags`](#--include-merged-tags)\n    - [`--message <msg>`](#--message-msg)\n    - [`--no-changelog`](#--no-changelog)\n    - [`--no-commit-hooks`](#--no-commit-hooks)\n    - [`--no-git-tag-version`](#--no-git-tag-version)\n    - [`--no-granular-pathspec`](#--no-granular-pathspec)\n    - [`--no-private`](#--no-private)\n    - [`--no-push`](#--no-push)\n    - [`--preid`](#--preid)\n    - [`--sign-git-commit`](#--sign-git-commit)\n    - [`--sign-git-tag`](#--sign-git-tag)\n    - [`--force-git-tag`](#--force-git-tag)\n    - [`--tag-version-prefix`](#--tag-version-prefix)\n    - [`--yes`](#--yes)\n  - [Deprecated Options](#deprecated-options)\n    - [`--cd-version`](#--cd-version)\n    - [`--repo-version`](#--repo-version)\n    - [`--skip-git`](#--skip-git)\n  - [Tips](#tips)\n    - [Generating Initial Changelogs](#generating-initial-changelogs)\n  - [Lifecycle Scripts](#lifecycle-scripts)\n\n### `--allow-branch <glob>`\n\nA whitelist of globs that match git branches where `lerna version` is enabled.\nIt is easiest (and recommended) to configure in `lerna.json`, but it is possible to pass as a CLI option as well.\n\n```json\n{\n  \"command\": {\n    \"version\": {\n      \"allowBranch\": \"main\"\n    }\n  }\n}\n```\n\nWith the configuration above, the `lerna version` will fail when run from any branch other than `main`.\nIt is considered a best-practice to limit `lerna version` to the primary branch alone.\n\n```json\n{\n  \"command\": {\n    \"version\": {\n      \"allowBranch\": [\"main\", \"feature/*\"]\n    }\n  }\n}\n```\n\nWith the preceding configuration, `lerna version` will be allowed in any branch prefixed with `feature/`.\nPlease be aware that generating git tags in feature branches is fraught with potential errors as the branches are merged into the primary branch. If the tags are \"detached\" from their original context (perhaps through a squash merge or a conflicted merge commit), future `lerna version` executions will have difficulty determining the correct \"diff since last release.\"\n\nIt is always possible to override this \"durable\" config on the command-line.\nPlease use with caution.\n\n```sh\nlerna version --allow-branch hotfix/oops-fix-the-thing\n```\n\n### `--amend`\n\n```sh\nlerna version --amend\n# commit message is retained, and `git push` is skipped.\n```\n\nWhen run with this flag, `lerna version` will perform all changes on the current commit, instead of adding a new one.\nThis is useful during [Continuous integration (CI)](https://en.wikipedia.org/wiki/Continuous_integration) to reduce the number of commits in the project's history.\n\nIn order to prevent unintended overwrites, this command will skip `git push` (i.e., it implies `--no-push`).\n\n### `--changelog-preset`\n\n```sh\nlerna version --conventional-commits --changelog-preset angular-bitbucket\n```\n\nBy default, the changelog preset is set to [`angular`](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular#angular-convention).\nIn some cases you might want to change either use a another preset or a custom one.\n\nPresets are names of built-in or installable configuration for conventional changelog.\nPresets may be passed as the full name of the package, or the auto-expanded suffix\n(e.g., `angular` is expanded to `conventional-changelog-angular`).\n\nThis option is can also be specified in `lerna.json` configuration:\n\n```json\n{\n  \"changelogPreset\": \"angular\"\n}\n```\n\nIf the preset exports a builder function (e.g. `conventional-changelog-conventionalcommits`), you can specify the [preset configuration](https://github.com/conventional-changelog/conventional-changelog-config-spec) too:\n\n```json\n{\n  \"changelogPreset\": {\n    \"name\": \"conventionalcommits\",\n    \"issueUrlFormat\": \"{{host}}/{{owner}}/{{repository}}/issues/{{id}}\"\n  }\n}\n```\n\n### `--conventional-commits`\n\n```sh\nlerna version --conventional-commits\n```\n\nWhen run with this flag, `lerna version` will use the [Conventional Commits Specification](https://conventionalcommits.org/) to [determine the version bump](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-recommended-bump) and [generate CHANGELOG.md files](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli).\n\nPassing [`--no-changelog`](#--no-changelog) will disable the generation (or updating) of `CHANGELOG.md` files.\n\n### `--conventional-graduate`\n\n```sh\nlerna version --conventional-commits --conventional-graduate=package-2,package-4\n\n# force all prerelease packages to be graduated\nlerna version --conventional-commits --conventional-graduate\n```\n\nWhen run with this flag, `lerna version` will graduate the specified packages (comma-separated) or all packages using `*`. This command works regardless of whether the current HEAD has been released, similar to `--force-publish`, except that any non-prerelease packages are ignored. If changes are present for packages that are not specified (if specifying packages), or for packages that are not in prerelease, those packages will be versioned as they normally would using `--conventional-commits`.\n\n\"Graduating\" a package means bumping to the non-prerelease variant of a prerelease version, eg. `package-1@1.0.0-alpha.0 => package-1@1.0.0`.\n\n> NOTE: when specifying packages, dependents of specified packages will be released, but will not be graduated.\n\n### `--conventional-prerelease`\n\n```sh\nlerna version --conventional-commits --conventional-prerelease=package-2,package-4\n\n# force all changed packages to be prereleased\nlerna version --conventional-commits --conventional-prerelease\n```\n\nWhen run with this flag, `lerna version` will release with prerelease versions the specified packages (comma-separated) or all packages using `*`. Releases all unreleased changes as pre(patch/minor/major/release) by prefixing the version recommendation from `conventional-commits` with `pre`, eg. if present changes include a feature commit, the recommended bump will be `minor`, so this flag will result in a `preminor` release. If changes are present for packages that are not specified (if specifying packages), or for packages that are already in prerelease, those packages will be versioned as they normally would using `--conventional-commits`.\n\n### `--create-release <type>`\n\n```sh\nlerna version --conventional-commits --create-release github\nlerna version --conventional-commits --create-release gitlab\n```\n\nWhen run with this flag, `lerna version` will create an official GitHub or GitLab release based on the changed packages. Requires `--conventional-commits` to be passed so that changelogs can be generated.\n\nTo authenticate with GitHub, the following environment variables can be defined.\n\n- `GH_TOKEN` (required) - Your GitHub authentication token (under Settings > Developer settings > Personal access tokens).\n- `GHE_API_URL` - When using GitHub Enterprise, an absolute URL to the API.\n- `GHE_VERSION` - When using GitHub Enterprise, the currently installed GHE version. [Supports the following versions](https://github.com/octokit/plugin-enterprise-rest.js).\n\nTo authenticate with GitLab, the following environment variables can be defined.\n\n- `GL_TOKEN` (required) - Your GitLab authentication token (under User Settings > Access Tokens).\n- `GL_API_URL` - An absolute URL to the API, including the version. (Default: https://gitlab.com/api/v4)\n\n> NOTE: When using this option, you cannot pass [`--no-changelog`](#--no-changelog).\n\n### `--exact`\n\n```sh\nlerna version --exact\n```\n\nWhen run with this flag, `lerna version` will specify updated dependencies in updated packages exactly (with no punctuation), instead of as semver compatible (with a `^`).\n\nFor more information, see the package.json [dependencies](https://docs.npmjs.com/files/package.json#dependencies) documentation.\n\n### `--force-publish`\n\n```sh\nlerna version --force-publish=package-2,package-4\n\n# force all packages to be versioned\nlerna version --force-publish\n```\n\nWhen run with this flag, `lerna version` will force publish the specified packages (comma-separated) or all packages using `*`.\n\n> This will skip the `lerna changed` check for changed packages and forces a package that didn't have a `git diff` change to be updated.\n\n### `--git-remote <name>`\n\n```sh\nlerna version --git-remote upstream\n```\n\nWhen run with this flag, `lerna version` will push the git changes to the specified remote instead of `origin`.\n\n### `--ignore-changes`\n\nIgnore changes in files matched by glob(s) when detecting changed packages.\n\n```sh\nlerna version --ignore-changes '**/*.md' '**/__tests__/**'\n```\n\nThis option is best specified as root `lerna.json` configuration, both to avoid premature shell evaluation of the globs and to share the config with `lerna diff` and `lerna changed`:\n\n```json\n{\n  \"ignoreChanges\": [\"**/__fixtures__/**\", \"**/__tests__/**\", \"**/*.md\"]\n}\n```\n\nPass `--no-ignore-changes` to disable any existing durable configuration.\n\n> In the following cases, a package will always be published, regardless of this option:\n>\n> 1. The latest release of the package is a `prerelease` version (i.e. `1.0.0-alpha`, `1.0.0–0.3.7`, etc.).\n> 2. One or more linked dependencies of the package have changed.\n\n### `--ignore-scripts`\n\nWhen passed, this flag will disable running [lifecycle scripts](#lifecycle-scripts) during `lerna version`.\n\n### `--include-merged-tags`\n\n```sh\nlerna version --include-merged-tags\n```\n\nInclude tags from merged branches when detecting changed packages.\n\n### `--message <msg>`\n\nThis option is aliased to `-m` for parity with `git commit`.\n\n```sh\nlerna version -m \"chore(release): publish %s\"\n# commit message = \"chore(release): publish v1.0.0\"\n\nlerna version -m \"chore(release): publish %v\"\n# commit message = \"chore(release): publish 1.0.0\"\n\n# When versioning packages independently, no placeholders are replaced\nlerna version -m \"chore(release): publish\"\n# commit message = \"chore(release): publish\n#\n# - package-1@3.0.1\n# - package-2@1.5.4\"\n```\n\nWhen run with this flag, `lerna version` will use the provided message when committing the version updates\nfor publication. Useful for integrating lerna into projects that expect commit messages to adhere\nto certain guidelines, such as projects which use [commitizen](https://github.com/commitizen/cz-cli) and/or [semantic-release](https://github.com/semantic-release/semantic-release).\n\nIf the message contains `%s`, it will be replaced with the new global version version number prefixed with a \"v\".\nIf the message contains `%v`, it will be replaced with the new global version version number without the leading \"v\".\nNote that this placeholder interpolation only applies when using the default \"fixed\" versioning mode, as there is no \"global\" version to interpolate when versioning independently.\n\nThis can be configured in lerna.json, as well:\n\n```json\n{\n  \"command\": {\n    \"version\": {\n      \"message\": \"chore(release): publish %s\"\n    }\n  }\n}\n```\n\n### `--no-changelog`\n\n```sh\nlerna version --conventional-commits --no-changelog\n```\n\nWhen using `conventional-commits`, do not generate any `CHANGELOG.md` files.\n\n> NOTE: When using this option, you cannot pass [`--create-release`](#--create-release-type).\n\n### `--no-commit-hooks`\n\nBy default, `lerna version` will allow git commit hooks to run when committing version changes.\nPass `--no-commit-hooks` to disable this behavior.\n\nThis option is analogous to the `npm version` option [`--commit-hooks`](https://docs.npmjs.com/misc/config#commit-hooks), just inverted.\n\n### `--no-git-tag-version`\n\nBy default, `lerna version` will commit changes to package.json files and tag the release.\nPass `--no-git-tag-version` to disable the behavior.\n\nThis option is analogous to the `npm version` option [`--git-tag-version`](https://docs.npmjs.com/misc/config#git-tag-version), just inverted.\n\n### `--no-granular-pathspec`\n\nBy default, `lerna version` will `git add` _only_ the leaf package manifests (and possibly changelogs) that have changed during the versioning process. This yields the equivalent of `git add -- packages/*/package.json`, but tailored to _exactly_ what changed.\n\nIf you **know** you need different behavior, you'll understand: Pass `--no-granular-pathspec` to make the git command _literally_ `git add -- .`. By opting into this [pathspec](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec), you **MUST HAVE _ALL_ SECRETS AND BUILD OUTPUT PROPERLY IGNORED, _OR IT WILL BE COMMITTED AND PUSHED_**.\n\nThis option makes the most sense configured in lerna.json, as you really don't want to mess it up:\n\n```json\n{\n  \"version\": \"independent\",\n  \"granularPathspec\": false\n}\n```\n\nThe root-level configuration is intentional, as this also covers the [identically-named option in `lerna publish`](https://github.com/lerna/lerna/tree/main/commands/publish#--no-granular-pathspec).\n\n### `--no-private`\n\nBy default, `lerna version` will include private packages when choosing versions, making commits, and tagging releases.\nPass `--no-private` to disable this behavior.\n\nNote that this option does _not_ exclude [private scoped packages](https://docs.npmjs.com/about-private-packages), only those with a [`\"private\": true` field](https://docs.npmjs.com/configuring-npm/package-json.html#private) in their package.json file.\n\n### `--no-push`\n\nBy default, `lerna version` will push the committed and tagged changes to the configured [git remote](#--git-remote-name).\nPass `--no-push` to disable this behavior.\n\n### `--preid`\n\n```sh\nlerna version prerelease\n# uses the next semantic prerelease version, e.g.\n# 1.0.0 => 1.0.1-alpha.0\n\nlerna version prepatch --preid next\n# uses the next semantic prerelease version with a specific prerelease identifier, e.g.\n# 1.0.0 => 1.0.1-next.0\n```\n\nWhen run with this flag, `lerna version` will increment `premajor`, `preminor`, `prepatch`, or `prerelease` semver\nbumps using the specified [prerelease identifier](http://semver.org/#spec-item-9).\n\n### `--sign-git-commit`\n\nThis option is analogous to the `npm version` [option](https://docs.npmjs.com/misc/config#sign-git-commit) of the same name.\n\n### `--sign-git-tag`\n\nThis option is analogous to the `npm version` [option](https://docs.npmjs.com/misc/config#sign-git-tag) of the same name.\n\n### `--force-git-tag`\n\nThis option replaces any existing tag instead of failing.\n\n### `--tag-version-prefix`\n\nThis option allows to provide custom prefix instead of the default one: `v`.\n\nKeep in mind that currently you have to supply it twice: for `version` command and for `publish` command:\n\n```bash\n# locally\nlerna version --tag-version-prefix=''\n# on ci\nlerna publish from-git --tag-version-prefix=''\n```\n\n### `--yes`\n\n```sh\nlerna version --yes\n# skips `Are you sure you want to publish these packages?`\n```\n\nWhen run with this flag, `lerna version` will skip all confirmation prompts.\nUseful in [Continuous integration (CI)](https://en.wikipedia.org/wiki/Continuous_integration) to automatically answer the publish confirmation prompt.\n\n## Deprecated Options\n\n### `--cd-version`\n\nPass the semver keyword to the [`bump`](#semver-bump) positional instead.\n\n### `--repo-version`\n\nPass an explicit version number to the [`bump`](#semver-bump) positional instead.\n\n### `--skip-git`\n\nUse [`--no-git-tag-version`](#--no-git-tag-version) and [`--no-push`](#--no-push) instead.\n\n> NOTE: This option **does not** restrict _all_ git commands from being executed. `git` is still required by `lerna version`.\n\n## Tips\n\n### Generating Initial Changelogs\n\nIf you start using the [`--conventional-commits`](#--conventional-commits) option _after_ the monorepo has been active for awhile, you can still generate changelogs for previous releases using [`conventional-changelog-cli`](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli#readme) and [`lerna exec`](https://github.com/lerna/lerna/tree/main/commands/exec#readme):\n\n```bash\n# Lerna does not actually use conventional-changelog-cli, so you need to install it temporarily\nnpm i -D conventional-changelog-cli\n# Documentation: `npx conventional-changelog --help`\n\n# fixed versioning (default)\n# run in root, then leaves\nnpx conventional-changelog --preset angular --release-count 0 --outfile ./CHANGELOG.md --verbose\nnpx lerna exec --concurrency 1 --stream -- 'conventional-changelog --preset angular --release-count 0 --commit-path $PWD --pkg $PWD/package.json --outfile $PWD/CHANGELOG.md --verbose'\n\n# independent versioning\n# (no root changelog)\nnpx lerna exec --concurrency 1 --stream -- 'conventional-changelog --preset angular --release-count 0 --commit-path $PWD --pkg $PWD/package.json --outfile $PWD/CHANGELOG.md --verbose --lerna-package $LERNA_PACKAGE_NAME'\n```\n\nIf you use a custom [`--changelog-preset`](#--changelog-preset), you should change `--preset` value accordingly in the example above.\n\n## Lifecycle Scripts\n\n```js\n// preversion:  Run BEFORE bumping the package version.\n// version:     Run AFTER bumping the package version, but BEFORE commit.\n// postversion: Run AFTER bumping the package version, and AFTER commit.\n```\n\nLerna will run [npm lifecycle scripts](https://docs.npmjs.com/misc/scripts#description) during `lerna version` in the following order:\n\n1. Detect changed packages, choose version bump(s)\n2. Run `preversion` lifecycle in root\n3. For each changed package, in topological order (all dependencies before dependents):\n   1. Run `preversion` lifecycle\n   2. Update version in package.json\n   3. Run `version` lifecycle\n4. Run `version` lifecycle in root\n5. Add changed files to index, if [enabled](#--no-git-tag-version)\n6. Create commit and tag(s), if [enabled](#--no-git-tag-version)\n7. For each changed package, in _lexical_ order (alphabetical according to directory structure):\n   1. Run `postversion` lifecycle\n8. Run `postversion` lifecycle in root\n9. Push commit and tag(s) to remote, if [enabled](#--no-push)\n10. Create release, if [enabled](#--create-release-type)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lerna/lerna.git",
    "directory": "commands/version"
  },
  "scripts": {
    "test": "echo \"Run tests from root\" && exit 1"
  },
  "version": "4.0.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">= 10.18.0"
      },
      "pkgid": "@lerna/version@4.0.0"
    }
  ]
}
